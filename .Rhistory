colnames(data)
colnames(data)<- data[1,]
colnames(data)
data[1,]
view(data)
View(data)
+
geturl<- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
remove(data)
geturl<- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data<-read.fwf(geturl, skip=3,widths=c(12,7,4,7,4,7,4,7,4))
View(data)
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
View(x)
d <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(d)
View(d)
col.names(d)<- c("week",rep(c("SST, SSTA"), each=2 )
)
colnames(d)<- c("week",rep(c("SST, SSTA"), each=2 ))
d <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
sum(d$V4)
remove(list=ls())
library (httpuv)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "9b1e4f4096dc1c51d1ef",
secret = "e7d5348a109c186ee8a28955dff18abdfa3d0fe4")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req[[1]]
req[1]
req[2]
req[3]
req[4]
req[5]
req[6]
req[7]
req[6]
req[7]
req[9]
req[10]
content(req)
?content
content(req, as=raw)
content(req, as="raw")
cont <-content(req)
cont
cont[1]
cont[[2]]
cont[[3]]
cont[[2]]$name
cont[[1]]$name
cont[[3]]$name
cont[[4]]$name
cont[[5]]$name
cont[[6]]$name
cont[[7]]$name
cont[[7]]$created_at
remove(list=ls())
swirl()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students,sex,count, -grade)
students2
res <- gather(students2,sex_class, count)
res <- gather(students2,sex_class, count, -grade)
res
?separate
separate(res,col=sex_class, into=c("sex","class"))
? gather
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
View(res)
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed,status="passed")
failed <- mutate(failed,status="failed")
?bind_rows
bind_rows(passed,failed)
sat
?select
?separate
submit()
?select
submit()
?group_by
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12 1975")
dmy(25081985)
ymd("192012")
ymd("1920--1--2")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours=9, minutes=06)
update(this_moment, hours=9, minutes=06, seconds=0)
this_moment <- update(this_moment, hours=9, minutes=07, seconds=0)
this_moment
?now
nyc<- now(tzone="America/New_York")
nyc
depart <- nyc+days(2)
depart
depart <- depart (dt1, hours=17, minutes=34)
depart <- update (depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15)+ minutes(50)
?with_tz
arrive<- with_tz(time,tzone="Asia/Hong_Kong")
arrive<- with_tz(arrive,tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17 2008", tz="Singapore")
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long(last_time, arrive)
how_long<- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
clear
remove(list=ls())
?Devices
?quartz
?quartz
install.packages(lattice)
install.packages('lattice')
library(lattice)
library(datasets)
xyplot(Ozone~Wind, data=airquality)
airquality <- transform(airquality, Month=factor(Month))
xyplot(Ozone~Wind|Month, data=airquality)
xyplot(Ozone~Wind|Month, data=airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind, data=airquality)
str(p)
print(p)
set.seed(10)
x <- rnorm(100)
y <- rep(0:1, each=50)
y <- x+f-f*x + rnorm(100, sd=0.5)
y <- x+f-f*x + rnorm(100, sd=0.5)
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each=50)
y <- x+f-f*x + rnorm(100, sd=0.5)
f <- factor(f,labels(c("Group1", "Group2"))
xyplot(y~x|f, layout=c(2,1))
f <- factor(f,labels=c("Group1", "Group2"))
xyplot(y~x|f, layout=c(2,1))
xyplot(y~x|f, panel=function(x,y,...){
panel.xyplot(x,y,...) ## First call default panel function
panel.lmline(x,y, col=2) ##Overaly a simple linear regression line
})
remove(list=ls())
install.packages("ggplot2")
libraty(ggplot2)
library(ggplot2)
str(mpg)
qplot(displ, hwy data=mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg,
geom = c("point", "smooth"))
qplot(displ, hwy, data=mpg,geom = c("point", "smooth"))
qplot(displ, hwy, data=mpg,geom = "smooth")
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, facets=drv~.)
qplot(hwy, data=mpg, facets=drv~.,binwidth=2)
str(maacs)
install.packages("nlme")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
table(BodyWeight$diet)
str(BodyWeight)
head(BodyWeight)
table(BodyWeight$Diet)
library(datasets)
data("airquality")
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
?qlot
library(ggplot2)
?qplot
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
remove(list=ls())
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
install.packages("knitr")
setwd("C:/Users/Georgia/Documents/OnlineCourses/ReproducibleResearch")
list.files()
```
data<- read.csv( "activity.csv",stringsAsFactors = F, header=T)
table(is.na(data))
sum(is.na(data))
sapply(data, function(x)all(is.na(x)))
sapply(data, function(x) is.na(x)))
sapply(data, function(x) is.na(x))
sum(sapply(data, function(x) is.na(x)))
table(sapply(data, function(x) is.na(x)))
sapply(data, function(x) sum(is.na(x)))
dataclean <- data[!is.na(data$steps)]
dataclean <- data[!is.na(data$steps),]
nrow(data)-nrow(dataclean)
str(dataclean)
library(lubridate)
data$date <- ymd(data$date)
str(data)
table(data$date)
sapply(data, function(x) sum(is.na(x)))
dataclean <- data[!is.na(data$steps),]
str(dataclean)
?aggregate
aggregate(x=dataclean$steps,by=dataclean$date,FUN=sum)
aggregate(x=dataclean$steps,by=list(dataclean$date),FUN=sum)
table(dataclean$date)
names(totalsteps) <- c(date, totalsteps)
totalsteps <-aggregate(x=dataclean$steps,by=list(dataclean$date),FUN=sum)
names(totalsteps) <- c("date", "totalsteps")
View(totalsteps)
View(totalsteps)
ggplot(totalsteps, aes(x=totalsteps)) + geom_histogram()
library(ggplot2)
ggplot(totalsteps, aes(x=totalsteps)) + geom_histogram()
View(totalsteps)
ggplot(totalsteps, aes(x=totalsteps)) + geom_histogram(binwidth=1000)
ggplot(totalsteps, aes(x=totalsteps)) + geom_histogram(binwidth=500)
ggplot(totalsteps, aes(x=totalsteps)) + geom_histogram(binwidth=1500)
ggplot(totalsteps, aes(x=totalsteps)) + geom_histogram(binwidth=5000)
ggplot(totalsteps, aes(x=totalsteps)) + geom_histogram(binwidth=5000,alpha=.5, position="identity")
ggplot(totalsteps, aes(x=totalsteps)) + geom_histogram(binwidth=5000,alpha=.5, position="identity")+theme_bw()
ggplot(totalsteps, aes(x=totalsteps)) + geom_histogram(binwidth=5000, position="identity")+theme_bw()
ggplot(totalsteps, aes(x=totalsteps)) +
geom_histogram(binwidth=5000, position="identity", colour="black", fill="white")+
theme_bw()
ggplot(totalsteps, aes(x=totalsteps)) +
geom_histogram(binwidth=2000, position="identity", colour="black", fill="white")+
theme_bw()
ggplot(totalsteps, aes(x=totalsteps)) +
geom_histogram(binwidth=1000, position="identity", colour="black", fill="white")+
theme_bw()
ggplot(totalsteps, aes(x=totalsteps)) +
geom_histogram(binwidth=1000, colour="black", fill="white")+
labs(title = "Total number of steps per number", y="total steps")+
theme_bw()
ggplot(totalsteps, aes(x=totalsteps)) +
geom_histogram(binwidth=1000, colour="black", fill="white")+
labs(title = "Total number of steps per number", x="total steps")+
theme_bw()
library(ggplot2)
ggplot(totalsteps, aes(x=totalsteps)) +
geom_histogram(binwidth=1500, colour="black", fill="white")+
labs(title = "Total number of steps per number", x="total steps")+
theme_bw()
ggplot(totalsteps, aes(x=totalsteps)) +
geom_histogram(binwidth=2500, colour="black", fill="white")+
labs(title = "Total number of steps per number", x="total steps")+
theme_bw()
ggplot(totalsteps, aes(x=totalsteps)) +
geom_histogram(binwidth=2500, colour="black", fill="white")+
labs(title = "Histogram - Total number of steps per day", x="total steps")+
theme_bw()
mean <- mean(totalsteps$totalsteps,na.rm=T)
me
?median
median <- median(totalsteps, na.rm=T)
median <- median(totalsteps$totalsteps, na.rm=T)
mean <- as.numeric(mean(totalsteps$totalsteps,na.rm=T),digits=2)
remove(mean)
mean <- round(mean(totalsteps$totalsteps,na.rm=T),2)
median <- median(totalsteps$totalsteps, na.rm=T)
mean <- format(round(mean(totalsteps$totalsteps,na.rm=T),2),format="d", big.mark=',')
median <- format(median(totalsteps$totalsteps, na.rm=T),format="d", big.mark = ',')
averagesteps <- aggregate(x=dataclean$steps,by=dataclean$interval,FUN=mean)
averagesteps <- aggregate(x=dataclean$steps,by=dataclean$interval,FUN=mean)
?aggregate
avgsteps <- aggregate(dataclean$steps,dataclean$interval,mean)
remove(mean,median)
avgsteps <- aggregate(dataclean$steps,dataclean$interval,mean)
avgsteps <- aggregate(dataclean$steps,list(dataclean$interval),mean)
View(avgsteps)
View(avgsteps)
names(avgsteps) <- c("interval","steps")
View(avgsteps)
View(avgsteps)
?"plot"
plot(x=avgsteps$interval, y=avgsteps$steps,type="l")
plot(x=avgsteps$interval, y=avgsteps$steps,type="l", title="Average number of steps per 5 minute interval", xlab="Interval", ylab="Avg Num of Steps")
plot(x=avgsteps$interval, y=avgsteps$steps,type="l", main = "Average number of steps per 5 minute interval", xlab="Interval", ylab="Avg Num of Steps")
maxinter <- avgsteps$interval[max(avgsteps$steps)]
maxinter
View(avgsteps)
View(avgsteps)
sapply(data, function(x) sum(is.na(x)))
tab <- sapply(data, function(x) sum(is.na(x)))
names(tab)
names(tab)[tab>0]
misCol <- names(tab)[tab>0]
sum(tab)
nummiss <- format(sum(tab),format="d",big.mark = ',')
steps <- data$steps
is.na(steps)
sum(is.na(steps))
is.na(steps) <- mean(steps,na.rm=T)
sum(is.na(steps))
is.na(steps)
steps[is.na(steps)]
steps[is.na(steps)] <- mean(steps,na.rm=T)
is.na(steps)
table(is.na(steps))
barplot(steps)
barplot(data$steps)
barplot(dataclean$steps)
barplot(steps)
barplot(dataclean$steps)
steps <- data$steps
table(is.na(data$steps))
steps[is.na(steps)] <- avgsteps$steps[avgsteps$interval==data$interval[is.na(steps)]]
View(data)
View(data)
View(avgsteps)
dataimput <- data
dataimput$steps<- steps
View(dataimput)
View(dataimput)
str(dataimput)
sum(is.na(dataimput))
table(is.na(dataimput))
table(is.na(dataimput$steps))
table(is.na(steps))
steps <- data$steps
table(is.na(steps))
data$interval[is.na(steps)]
table(data$interval[is.na(steps)])
View(avgsteps)
View(avgsteps)
table(data$interval[is.na(steps)]==avgsteps$interval)
table(avgsteps$steps[data$interval[is.na(steps)]==avgsteps$interval])
sum(table(avgsteps$steps[data$interval[is.na(steps)]==avgsteps$interval]))
steps[is.na(steps)] <- avgsteps$steps[avgsteps$interval==data$interval[is.na(steps)]]
table(data$interval[is.na(steps)])
data$interval[is.na(data$steps)]
table(avgsteps$steps[data$interval(is.na(data$steps))==avgsteps$interval])
avgsteps$steps[data$interval(is.na(data$steps))==avgsteps$interval]
avgsteps$steps[data$interval[is.na(data$steps)]==avgsteps$interval]
join(data,avgsteps, by=interval)
join(data,avgsteps, by=interval)
?join
library(plyr)
join(data,avgsteps, by=interval)
merge(data,avgsteps,by="interval")
dataimput <-merge(data,avgsteps,by="interval")
View(dataimput)
View(dataimput)
avgsteps <- aggregate(dataclean$steps,list(dataclean$interval),mean)
names(avgsteps) <- c("interval","avgsteps")
plot(x=avgsteps$interval, y=avgsteps$avgsteps,type="l", main = "Average number of steps per 5-minute interval", xlab="Interval", ylab="Avg Num of Steps")
dataimput <-merge(data,avgsteps,by="interval")
View(dataimput)
View(dataimput)
dataimput$steps[is.na(dataimput$steps)]<-dataimput$avgsteps[is.na(dataimput$steps)]
sum(is.na(dataimput$steps))
sapply(data, function(x) sum(is.na(x)))
sapply(dataimput, function(x) sum(is.na(x)))
dataimput <- dataimput[,1:3]
sapply(dataimput, function(x) sum(is.na(x)))
totalsteps1 <-aggregate(x=dataimput$steps,by=list(dataimput$date),FUN=sum)
names(totalsteps1) <- c("date", "totalsteps")
ggplot(totalsteps1, aes(x=totalsteps1)) +
geom_histogram(binwidth=2500, colour="black", fill="white")+
labs(title = "Histogram - Total number of steps per day", x="total steps")+
theme_bw()
View(totalsteps1)
View(totalsteps1)
View(totalsteps)
View(totalsteps)
ggplot(totalsteps1, aes(x=totalsteps)) +
geom_histogram(binwidth=2500, colour="black", fill="white")+
labs(title = "Histogram - Total number of steps per day", x="total steps")+
theme_bw()
meansteps1 <- format(round(mean(totalsteps1$totalsteps,na.rm=T),2),format="d", big.mark=',')
mediansteps1 <- format(median(totalsteps1$totalsteps, na.rm=T),format="d", big.mark = ',')
?weekday
weekdays
?weekdays
tmp <- weekdays(dataimput$date)
table(tmp)
tmp_week <- tmp %in% c("Saturday, Sunday")
table(tmp_week)
tmp_week <- tmp %in% c("Saturday", "Sunday")
table(tmp_week)
?factor()
tmp_week <- factor(tmp %in% c("Saturday", "Sunday"), levels=c("weekday","weekend"))
table(tmp_week)
tmp_week <- factor(as.character(tmp %in% c("Saturday", "Sunday")), levels=c("weekday","weekend"))
table(tmp_week)
tmp_week <- tmp %in% c("Saturday", "Sunday")
table(tmp_week)
str(tmp_week)
as.factor(tmp_week)
as.factor(tmp_week, levels="weekday","weekend")
as.factor(tmp_week, levels=c("weekday","weekend"))
tmp_week <- tmp %in% c("Saturday", "Sunday")
as.factor(tmp_week, levels=c("weekday","weekend"))
as.factor(tmp_week, levels=c("weekday","weekend"), labels=levels)
as.factor(tmp_week, labels=c("weekday","weekend"))
table(tmp_week)
str(tmp_week)
tmp_fcafactor(tmp_week, labels=c("weekday","weekend"))
tmpfac <-factor(tmp_week, labels=c("weekday","weekend"))
table(tmp_week)
table(tmpfac)
str(tmpfa)
str(tmpfac)
tmp <- weekdays(dataimput$date) %in% c("Saturday", "Sunday")
table(tmp)
tmp <- weekdays(dataimput$date) %in% c("Saturday", "Sunday")
dataimput$Day <- factor(tmp, labels=c("weekday","weekend"))
remove(tmp)
table(dataimput)
table(dataimput$Day)
avgsteps1 <- aggregate(dataimput$steps,list(dataimput$interval,dataimput$day),mean)
View(dataimput)
avgsteps1 <- aggregate(dataimput$steps,list(c(dataimput$interval,dataimput$day)),mean)
View(avgsteps1)
View(avgsteps1)
?aggregate
avgsteps1 <- aggregate(dataimput$steps,list(dataimput$interval,dataimput$day)),mean)
avgsteps1 <- aggregate(dataimput$steps,list(dataimput$interval,dataimput$day),mean)
avgsteps1 <- aggregate(dataimput$steps,list(dataimput$interval),mean)
dataimput <-merge(dataimput,avgsteps1,by="interval")
View(avgsteps1)
names(avgsteps1)<- c("interval","avgsteps")
dataimput <-merge(dataimput,avgsteps,by="interval")
View(dataimput)
View(dataimput)
xyplot( avgstep~ interval, data=dataimput, type='b', groups = day)
library(lattice)
xyplot( avgstep~ interval, data=dataimput, type='b', groups = day)
str(dataimput)
xyplot( avgsteps~ interval, data=dataimput, type='b', groups = Day)
xyplot( avgsteps~ interval|Day, data=dataimput, type='b')
xyplot( avgsteps~ interval|Day, data=dataimput, type='o')
xyplot( avgsteps~ interval|Day, data=dataimput, type='l')
bwplot()
?bwplot
bwplot( avgsteps~ interval|Day, data=dataimput, type='l')
xyplot( avgsteps~ interval|Day, data=dataimput, type='l')
remove(list=ls())
getwd()
